export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"

# If you come from bash you might have to change your $PATH.
export PATH="$HOME/go:$HOME/go/bin:$HOME/.zsh/scripts:/usr/local/go/bin:$HOME/.local/bin:$HOME/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH"

# omz plugins configs mandatories(which should be invoked at the top of .zshrc)
zstyle :omz:plugins:ssh-agent ssh-add-args --apple-load-keychain

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's installer chunk

#############################################
################## Prompt ###################
#############################################
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#############################################
################## Plugins ##################
#############################################
zinit ice depth=1; zinit light romkatv/powerlevel10k
# disable zi from zinit to use zoxide's zi(interactive)
zinit wait lucid atload'_zsh_autosuggest_start; unalias zi 2>/dev/null;' light-mode for \
    zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light zdharma/history-search-multi-word
zinit light zdharma/fast-syntax-highlighting
zinit snippet OMZP::git
zinit snippet OMZP::colored-man-pages
zinit snippet OMZP::copypath
zinit snippet OMZP::cp
zinit ice as"zsh-completion"
zinit snippet OMZP::docker
zinit snippet OMZP::docker-compose
zinit snippet OMZP::fzf
zinit snippet OMZP::ssh-agent
zinit snippet OMZP::z

#############################################
############# Extra Configs #################
#############################################
dirs=(
  .zsh/cmds
  .zsh/keybindings
  .zsh/hooks
  .env
)
ignore=(
  "."
  ".keep"
  ".DS_Store"
)
old_ifs=$IFS
source_cur_dir() {
  dir="$1"
  while IFS= read -r -d '' file; do
    # This removes everything before the last / (and including the / itself)
    # Which will leave out only the filename
    file_name=${file##*/}
    # So the ignore list can be respected
    if [[ ${ignore[*]} =~ $file_name ]]; then
      continue
    fi
    # shell LSP do not allow sourcing file from variables hence the suppression sentence
    # shellcheck disable=SC1090
    source "$file"
  done < <(find $dir -type f -print0)
}
IFS=$old_ifs
for dir in "${dirs[@]}"; do
  source_cur_dir "$HOME/$dir"
done

#############################################
########### Environment variables ###########
#############################################
export EDITOR=vim
export MANPAGER="sh -c 'col -bx | bat  --wrap never -l man --style=full'"

#############################################
################## Aliases ##################
#############################################
alias nv="nvim"
alias nvi="nvim"
export EZA_ICON_SPACING=2
alias ls="eza"
alias l="eza -1h --icons"
alias ll="eza -1"
alias li="eza --icons"
alias lll="ll -lh --icons"
alias l2="ll"
alias l3="lll"
alias bat="bat --paging=always --style=full --color=always"
alias escape="sed 's/\x1b\[[0-9;]*m//g'"
alias aider="aider --env-file $HOME/.aider.env --sonnet"
alias wcl="wezterm cli"
alias ltree="eza --icons=always --tree"
alias lt="ltree"
alias leetcode="nvim leetcode.nvim"
alias so="source"
alias czf="chezmoi forget"
alias cza="chezmoi add"
alias cz="chezmoi"
alias czu="chezmoi re-add"
alias czdf="chezmoi diff"
alias czd="chezmoi cd"
alias harlequin="harlequin --theme zenburn"
alias hlq="harlequin"
alias cdr='cd "$(git rev-parse --show-toplevel 2>/dev/null || echo ".")"'
alias lgit="lazygit"
alias lgt="lazygit"
alias lg="lazygit"
alias top="bpytop"
alias clip="pbcopy"
# AI assistant
copy_and_glow() {
  tee >(tr -d "\n" | pbcopy) | glow
}
aichat_with_model() {
  aichat -m openrouter:anthropic/claude-3.7-sonnet "$@" | copy_and_glow
}
alias what="aichat_with_model Short Answer: what "
alias how="aichat_with_model -r %shell% Short Answer: how "
alias explain="aichat_with_model -r %explain-shell%"
alias cli="aichat_with_model -r %shell%"
alias codeai="aichat_with_model -r codas -c"
alias generate="codeai"
alias gen="codeai"
alias ai="aichat_with_model"
alias sdf="git diff | git-split-diffs --color | less -RFX"
alias gdf="git diff | git-split-diffs --color | less -RFX"
# about creating tempoarary file and directory
export TMPFILE="/tmp/last-mktemp-path"
if [ ! -f "$TMPFILE" ]; then
    touch "$TMPFILE"
fi
alias mktmp="mktemp"
alias tmpdir="f(){ export TMPDIR="$(mktemp -d)"; echo \"$TMPDIR\" > \"$TMPFILE\"; cd \"$(cat $TMPFILE)\" }; f || return 1;"
alias tempdir="tmpdir"
alias cdtmp='cd "$(cat $TMPFILE)" || return 1'
alias cdtemp="cdtmp"
alias echotmp='cat "$TMPFILE" || return 1'
alias echotemp="echotmp"
alias tm=tmux
alias tmx=tmux
alias tma=tmux attach
alias tldr="tldr --color=always"
alias py="python3"
alias pip="python3 -m pip"

# Terminal Padding Keybindings
remove_terminal_padding(){
  sed -i -e 's/config.window_padding.left.*/config.window_padding.left = 0/' "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e 's/config.window_padding.right.*/config.window_padding.right = 0/' "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e 's/config.window_padding.top.*/config.window_padding.top = 0/' "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e 's/config.window_padding.bottom.*/config.window_padding.bottom = 0/' "$HOME/.config/wezterm/wezterm.lua"
}
add_terminal_padding(){
  local px='"0.5cell"'
  local py='"0.2cell"'
  sed -i -e "s/config.window_padding.left.*/config.window_padding.left = $px/" "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e "s/config.window_padding.right.*/config.window_padding.right = $px/" "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e "s/config.window_padding.top.*/config.window_padding.top = $py/" "$HOME/.config/wezterm/wezterm.lua"
  sed -i -e "s/config.window_padding.bottom.*/config.window_padding.bottom = $py/" "$HOME/.config/wezterm/wezterm.lua"
}
zle -N remove_terminal_padding
zle -N add_terminal_padding
bindkey -r '^\['
bindkey -r '^\]'
bindkey '^\[' remove_terminal_padding
bindkey '^\]' add_terminal_padding

bindkey -r '^T'
bindkey '^b' fzf-file-widget

# sesh zsh config
function sesh-sessions() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt '⚡  ')
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}
zle     -N             sesh-sessions
bindkey -M emacs '\es' sesh-sessions
bindkey -M vicmd '\es' sesh-sessions
bindkey -M viins '\es' sesh-sessions

# Emacs mode
bindkey -e 

# open neovim (F12)
open_neovim() {
    # check if on real terminal or not
    if [[ -z $STY ]]; then
        nv
    fi
}
zle -N open_neovim
bindkey -r '\e[24~'
bindkey '\e[24~' open_neovim

# zoxide init
eval "$(zoxide init zsh)"

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/swimmingpolar/.cache/lm-studio/bin"

bindkey '^[l' clear-screen && bindkey -r '^L'
